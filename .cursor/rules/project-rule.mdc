---
description: 
globs: 
alwaysApply: true
---
# 프로젝트 규칙

## 1. 서버 관리
- 서버 포트는 반드시 `3000`번을 사용해야 합니다.
- 서버는 항상 프로젝트 루트(scs)에서 `npm run dev`로 실행합니다.
- 서버 실행 시 오류가 발생하면 즉시 로그(`logs/out.log`, `logs/err.log`)의 최근 30줄을 확인하고, 문제를 진단/수정합니다.
- 서버가 정상적으로 실행 중인지 확인할 때는 `netstat -ano | findstr :3000` 명령으로 3000번 포트의 LISTENING 상태를 반드시 점검합니다.
- 서버 실행/재시작 자동화 시, 잘못된 경로에서 실행하지 않도록 항상 루트 경로를 확인합니다.

## 2. 포트 설정
- 모든 코드 베이스의 포트는 `3000`으로 고정합니다.
- `playwright.config.ts`, API 호출 등 모든 곳에서 `3000`번 포트를 사용합니다.

## 3. 테스트 워크플로우
- Playwright MCP Server 를 사용해서 테스트를 합니다. 오류 발생시 **반드시 콘솔을 확인**합니다.
- Playwright 테스트 실패 시, 사용자에게 **반드시 수동 테스트를 제안**합니다.
- 임의로 테스트를 재실행하거나 코드를 수정하지 않습니다.
- 수동 테스트 계획은 사용자가 따라하기 쉽도록 상세하게 작성합니다.

## 테스트 계정 규칙

1.  **일반 사용자 계정**: `testuser` / `password123`
2.  **관리자 계정**: `admin` / `admin`

-   모든 Playwright 테스트는 위의 고정된 계정을 사용해야 합니다.
-   회원가입 플로우가 필요한 테스트는 예외적으로 동적 계정을 생성할 수 있지만, 테스트 종료 후 생성된 계정을 정리하는 로직을 포함해야 합니다.

## 4. 로그 확인 규칙 (PowerShell)
- PM2 로그 등 로그 파일을 확인할 때는 항상 아래와 같이 `-Tail 30` 옵션을 사용하여 최근 30줄만 출력한다.
- 예시:
  - `Get-Content logs\err.log -Tail 30`
  - `Get-Content logs\out.log -Tail 30`

## 5. 파이썬 스크립트 및 venv 관리 규칙 (2025-06-24 추가)

- 모든 파이썬 스크립트는 반드시 `scripts/` 폴더에 저장한다.
- `scripts/` 폴더 내에 venv(가상환경)를 생성하여 파이썬 패키지 및 실행 환경을 독립적으로 관리한다.
- venv 자동 생성/초기화 스크립트 제공:
  - Windows: `scripts/init_python_venv.bat`
  - macOS/Linux: `scripts/init_python_venv.sh`
- venv 사용 예시:
  1. `cd scripts`
  2. (Windows) `init_python_venv.bat` 실행, (macOS/Linux) `bash init_python_venv.sh` 실행
  3. 안내에 따라 가상환경 활성화 후, 필요한 패키지 설치 및 스크립트 실행
  4. `requirements.txt`로 패키지 목록 관리, venv 폴더는 git에 커밋하지 않음
- 예시 명령어:
  - Windows:  
    ```bat
    cd scripts
    init_python_venv.bat
    .\venv\Scripts\activate
    pip install -r requirements.txt
    python update_dungeon_unlock_requirements_v2.py
    deactivate
    ```
  - macOS/Linux:  
    ```bash
    cd scripts
    bash init_python_venv.sh
    source venv/bin/activate
    pip install -r requirements.txt
    python update_dungeon_unlock_requirements_v2.py
    deactivate
    ```
